import re
import os

# 설정 값 기준
required_settings = {
    'lcredit': -1,
    'ucredit': -1,
    'dcredit': -1,
    'ocredit': -1,
    'minlen': 8,
    'difok': 'N'
}

def check_system_auth():
    try:
        with open('/etc/pam.d/system-auth', 'r') as file:
            content = file.read()
            minlen = re.search(r'pam_pwquality\.so.*minlen=(\d+)', content)
            minclass = re.search(r'pam_pwquality\.so.*minclass=(\d+)', content)
            if minlen and minclass:
                return {
                    'minlen': int(minlen.group(1)),
                    'minclass': int(minclass.group(1)),
                    'source': 'system-auth'
                }
            else:
                return None
    except FileNotFoundError:
        return None
    except Exception as e:
        print(f"Error reading /etc/pam.d/system-auth: {e}")
        return None

def check_pwquality_conf():
    try:
        with open('/etc/security/pwquality.conf', 'r') as file:
            content = file.read()
            settings = {
                'lcredit': re.search(r'lcredit\s*=\s*(-?\d+)', content),
                'ucredit': re.search(r'ucredit\s*=\s*(-?\d+)', content),
                'dcredit': re.search(r'dcredit\s*=\s*(-?\d+)', content),
                'ocredit': re.search(r'ocredit\s*=\s*(-?\d+)', content),
                'minlen': re.search(r'minlen\s*=\s*(\d+)', content),
                'difok': re.search(r'difok\s*=\s*(\S+)', content),
            }
            return {
                key: (int(value.group(1)) if key != 'difok' else value.group(1))
                for key, value in settings.items() if value
            }
    except FileNotFoundError:
        return None
    except Exception as e:
        print(f"Error reading /etc/security/pwquality.conf: {e}")
        return None

def check_login_defs():
    try:
        with open('/etc/login.defs', 'r') as file:
            content = file.read()
            minlen = re.search(r'PASS_MIN_LEN\s*(\d+)', content)
            if minlen:
                return {
                    'minlen': int(minlen.group(1)),
                    'source': 'login.defs'
                }
            else:
                return None
    except FileNotFoundError:
        return None
    except Exception as e:
        print(f"Error reading /etc/login.defs: {e}")
        return None

def assess_password_complexity(system_auth_settings, pwquality_settings, login_defs_settings):
    settings = {
        'system-auth': system_auth_settings,
        'pwquality.conf': pwquality_settings,
        'login.defs': login_defs_settings
    }
    
    if system_auth_settings:
        current_settings = system_auth_settings
        source = 'system-auth'
    elif pwquality_settings:
        current_settings = pwquality_settings
        source = 'pwquality.conf'
    elif login_defs_settings:
        current_settings = login_defs_settings
        source = 'login.defs'
    else:
        print("패스워드 복잡성 적용: 취약 (설정 없음)")
        return

    # 비교할 설정 항목과 결과
    print(f"패스워드 복잡성 적용 기준: {source}")
    all_matched = True
    
    # 모든 필수 항목에 대해 설정 값이 기준과 일치하는지 확인
    for key, required_value in required_settings.items():
        if key in current_settings:
            actual_value = current_settings[key]
            if actual_value != required_value:
                print(f"{key} 설정: 취약 (기대값: {required_value}, 현재값: {actual_value})")
                all_matched = False
            else:
                print(f"{key} 설정: 양호")
        else:
            print(f"{key} 설정: 취약 (설정 없음)")

    if all_matched:
        print("[양호] 패스워드 복잡성")
    else: 
        print("[취약] 패스워드 복잡성")

def main():
    system_auth_settings = check_system_auth()
    pwquality_settings = check_pwquality_conf()
    login_defs_settings = check_login_defs()
    
    assess_password_complexity(system_auth_settings, pwquality_settings, login_defs_settings)

if __name__ == "__main__":
    main()
