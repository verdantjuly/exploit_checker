import re

# 설정 값 기준
required_settings = {
    'lcredit': -1,
    'ucredit': -1,
    'dcredit': -1,
    'ocredit': -1,
    'minlen': 8,
    'difok': 'N'
}

def check_system_auth():
    try:
        with open('/etc/pam.d/system-auth', 'r') as file:
            content = file.read()
            settings = {
                'lcredit': re.search(r'pam_pwquality\.so.*lcredit=(-?\d+)', content),
                'ucredit': re.search(r'pam_pwquality\.so.*ucredit=(-?\d+)', content),
                'dcredit': re.search(r'pam_pwquality\.so.*dcredit=(-?\d+)', content),
                'ocredit': re.search(r'pam_pwquality\.so.*ocredit=(-?\d+)', content),
                'minlen': re.search(r'pam_pwquality\.so.*minlen=(\d+)', content),
                'difok': re.search(r'pam_pwquality\.so.*difok=(\S+)', content),
            }
            return {
                key: (int(value.group(1)) if value and key != 'difok' else value.group(1))
                for key, value in settings.items() if value
            }
    except FileNotFoundError:
        return None
    except Exception as e:
        print(f"Error reading /etc/pam.d/system-auth: {e}")
        return None

def check_pwquality_conf():
    try:
        with open('/etc/security/pwquality.conf', 'r') as file:
            content = file.read()
            settings = {
                'lcredit': re.search(r'lcredit\s*=\s*(-?\d+)', content),
                'ucredit': re.search(r'ucredit\s*=\s*(-?\d+)', content),
                'dcredit': re.search(r'dcredit\s*=\s*(-?\d+)', content),
                'ocredit': re.search(r'ocredit\s*=\s*(-?\d+)', content),
                'minlen': re.search(r'minlen\s*=\s*(\d+)', content),
                'difok': re.search(r'difok\s*=\s*(\S+)', content),
            }
            return {
                key: (int(value.group(1)) if value and key != 'difok' else value.group(1))
                for key, value in settings.items() if value
            }
    except FileNotFoundError:
        return None
    except Exception as e:
        print(f"Error reading /etc/security/pwquality.conf: {e}")
        return None

def check_login_defs():
    try:
        with open('/etc/login.defs', 'r') as file:
            content = file.read()
            minlen = re.search(r'PASS_MIN_LEN\s*(\d+)', content)
            if minlen:
                return int(minlen.group(1))
            else:
                return None
    except FileNotFoundError:
        return None
    except Exception as e:
        print(f"Error reading /etc/login.defs: {e}")
        return None

def assess_password_complexity(system_auth_settings, pwquality_settings, login_defs_minlen):
    # 우선순위에 따라 minlen 설정을 선택
    if system_auth_settings and 'minlen' in system_auth_settings:
        current_minlen = system_auth_settings['minlen']
        source = 'system-auth'
    elif pwquality_settings and 'minlen' in pwquality_settings:
        current_minlen = pwquality_settings['minlen']
        source = 'pwquality.conf'
    elif login_defs_minlen is not None:
        current_minlen = login_defs_minlen
        source = 'login.defs'
    else:
        current_minlen = None
        source = None

    # minlen 설정 비교 및 결과 출력
    if current_minlen is not None:
        print(f"패스워드 최소 길이 적용 기준: {source}")
        if current_minlen >= required_settings['minlen']:
            print(f"minlen 설정: 양호 (기대값: {required_settings['minlen']}, 현재값: {current_minlen})")
            minlen_matched = True
        else:
            print(f"minlen 설정: 취약 (기대값: {required_settings['minlen']}, 현재값: {current_minlen})")
            minlen_matched = False
    else:
        print("패스워드 최소 길이 설정: 취약 (설정 없음)")
        minlen_matched = False

    # 전체 패스워드 복잡성 평가
    if system_auth_settings:
        current_settings = system_auth_settings
        source = 'system-auth'
    elif pwquality_settings:
        current_settings = pwquality_settings
        source = 'pwquality.conf'
    elif login_defs_minlen is not None:
        current_settings = {'minlen': login_defs_minlen}
        source = 'login.defs'
    else:
        print("패스워드 복잡성 적용: 취약 (설정 없음)")
        return

    print(f"패스워드 복잡성 적용 기준: {source}")
    all_matched = minlen_matched

    # 모든 필수 항목에 대해 설정 값이 기준과 일치하는지 확인
    for key, required_value in required_settings.items():
        if key in current_settings:
            actual_value = current_settings[key]
            if actual_value != required_value:
                print(f"{key} 설정: 취약 (기대값: {required_value}, 현재값: {actual_value})")
                all_matched = False
            else:
                print(f"{key} 설정: 양호")
        else:
            print(f"{key} 설정: 취약 (설정 없음)")
            all_matched = False

    if all_matched:
        print("[양호] 패스워드 복잡성")
    else: 
        print("[취약] 패스워드 복잡성")

def main():
    system_auth_settings = check_system_auth()
    pwquality_settings = check_pwquality_conf()
    login_defs_minlen = check_login_defs()
    
    assess_password_complexity(
        system_auth_settings if system_auth_settings else None,
        pwquality_settings if pwquality_settings else None,
        login_defs_minlen
    )


