import re
import os

# 설정 값 기준
required_settings = {
    'lcredit': -1,
    'ucredit': -1,
    'dcredit': -1,
    'ocredit': -1,
    'minlen': 8,
    'difok': 'N'
}

def check_system_auth():
    try:
        with open('/etc/pam.d/system-auth', 'r') as file:
            content = file.read()
            minlen = re.search(r'pam_pwquality\.so.*minlen=(\d+)', content)
            minclass = re.search(r'pam_pwquality\.so.*minclass=(\d+)', content)
            if minlen and minclass:
                return {
                    'minlen': int(minlen.group(1)),
                    'minclass': int(minclass.group(1)),
                    'source': 'system-auth'
                }
            else:
                return None
    except FileNotFoundError:
        return None
    except Exception as e:
        print(f"Error reading /etc/pam.d/system-auth: {e}")
        return None

def check_pwquality_conf():
    try:
        with open('/etc/security/pwquality.conf', 'r') as file:
            content = file.read()
            settings = {
                'lcredit': re.search(r'lcredit\s*=\s*(-?\d+)', content),
                'ucredit': re.search(r'ucredit\s*=\s*(-?\d+)', content),
                'dcredit': re.search(r'dcredit\s*=\s*(-?\d+)', content),
                'ocredit': re.search(r'ocredit\s*=\s*(-?\d+)', content),
                'minlen': re.search(r'minlen\s*=\s*(\d+)', content),
                'difok': re.search(r'difok\s*=\s*(\S+)', content),
            }
            return {
                key: (int(value.group(1)) if key != 'difok' else value.group(1))
                for key, value in settings.items() if value
            }
    except FileNotFoundError:
        return None
    except Exception as e:
        print(f"Error reading /etc/security/pwquality.conf: {e}")
        return None

def check_login_defs():
    try:
        with open('/etc/login.defs', 'r') as file:
            content = file.read()
            minlen = re.search(r'PASS_MIN_LEN\s*(\d+)', content)
            if minlen:
                return {
                    'minlen': int(minlen.group(1)),
                    'source': 'login.defs'
                }
            else:
                return None
    except FileNotFoundError:
        return None
    except Exception as e:
        print(f"Error reading /etc/login.defs: {e}")
        return None

def assess_password_complexity(system_auth_settings, pwquality_settings, login_defs_settings):
    if system_auth_settings:
        print("패스워드 복잡성 적용: 양호 (system-auth에서 설정됨)")
    elif pwquality_settings:
        if all(
            pwquality_settings.get(key) == required_settings[key]
            for key in required_settings if key != 'difok'
        ) and pwquality_settings.get('difok') == required_settings['difok']:
            print("패스워드 복잡성 적용: 양호 (pwquality.conf에서 설정됨)")
        else:
            print("패스워드 복잡성 적용: 취약 (pwquality.conf 설정이 요구 사항과 일치하지 않음)")
    elif login_defs_settings:
        if login_defs_settings.get('minlen') >= required_settings['minlen']:
            print("패스워드 복잡성 적용: 양호 (login.defs에서 설정됨)")
        else:
            print("패스워드 복잡성 적용: 취약 (login.defs 설정이 요구 사항과 일치하지 않음)")
    else:
        print("패스워드 복잡성 적용: 취약 (설정 없음)")

def main():
    print("패스워드 복잡성 설정 확인 중...\n")
    
    system_auth_settings = check_system_auth()
    pwquality_settings = check_pwquality_conf()
    login_defs_settings = check_login_defs()
    
    assess_password_complexity(system_auth_settings, pwquality_settings, login_defs_settings)

